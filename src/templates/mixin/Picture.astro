---
import type { ImageMetadata } from 'astro';
import { getImage } from 'astro:assets';

type Props = {
  srcPaths: [string, string?];
  media?: number;
  classNames?: string;
  alt?: string;
  loading?: 'lazy' | 'eager';
  format?: 'webp' | 'avif';
};

const { srcPaths, media = 768, classNames, alt = '', loading = 'lazy', format = 'webp' } = Astro.props;

const importImage = async (src: string) => {
  const imageFile = import.meta.glob<{ default: ImageMetadata }>('/src/assets/images/*');

  if (!imageFile[`/src/assets/images/${src}`]) return;
  const moduleImage = await imageFile[`/src/assets/images/${src}`]();

  const { default: imageSrc } = moduleImage;
  const image = await getImage({ src: imageSrc, format: format });
  const { loading: loadingMode, ...attributes } = image.attributes;
  return { src: image.src, attributes };
};

const importImages = async () => {
  return Promise.all(
    srcPaths.map(async (src) => {
      if (!src) return;
      return importImage(src);
    }),
  );
};

const images = await importImages();

// 使用時
// <ImageFrame srcPaths={['xxx.jpg']} />
// <ImageFrame srcPaths={['xxx_pc.jpg','xxx_sp.jpg']} media='768' />
---

{
  (
    <>
      {images.length === 1 ? (
        <img src={images[0]?.src} {...images[0]?.attributes} loading={loading} alt={alt} class:list={[classNames]} />
      ) : (
        <picture class:list={[classNames]}>
          <source media={`(min-width: ${media}px)`} srcset={images[0]?.src} />
          <img src={images[1]?.src} {...images[1]?.attributes} loading={loading} alt={alt} />
        </picture>
      )}
    </>
  )
}

<style lang="scss">
  img {
    width: 100%;
    height: auto;
  }
</style>